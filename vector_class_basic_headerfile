/*
	Zusammen in der Übung geschrieben
	nicht mehr using namespace std
*/

#ifndef _VECTOR_H
#define _VECTOR_H

#include <iostream>
#include <initializer_list>
#include <stdexcept>

using std::cout;
using std::endl;

class Vector {

public:

	class Iterator;
	class ConstIterator;
	using value_type = double;			//value_type wird automatisch durch double ersetzt
	using size_type = size_t;
	using pointer = value_type * ;			//erstelle alias für einen pointer, mit dem typ von "value_typ", hier double	
	using difference_type = std::ptrdiff_t;
	using reference = value_type & ;
	using const_reference = const value_type&;
	using const_pointer = const value_type*;
	using const_iterator = Vector::ConstIterator;
	using iterator = Vector::Iterator;


	/*

	//===================
	//Klasse Iterator
	//==================



	class Iterator {
	public:
		using value_type = Vector::value_type;
		using reference = Vector::reference;
		using pointer = Vector::pointer;
		using difference_type = Vector::difference_type;
		using iterator_category = std::forward_iterator_tag;


	private:
		pointer ptr;

	public:
		//Konstruktor - Iterator
		Iterator() : ptr{ nullptr } {}
		Iterator(pointer _ptr) : ptr{ _ptr } {}			//exepction schreiben

		//Methoden
		reference operator*() {
			return *ptr;
		}

		pointer operator->() {
			return ptr;
		}

		bool operator==(const ConstIterator& iter) {
			return	static_cast<ConstIterator> (*this) == iter;
		}

		bool operator!=(const ConstIterator& iter) {
			return	static_cast<ConstIterator> (*this) != iter;
		}


		iterator& operator++() {
			ptr = ptr + 1;
			return *this;
		}


		iterator operator++(int) {
			Iterator old{ *this };
			ptr += 1;
			return old;
		}

		operator const_iterator() const {
			return ConstIterator{ ptr };
		}


	};//Itterator ende

	*/


	/*

	class ConstIterator {
	public:
		using value_type = Vector::value_type;
		using reference = Vector::const_reference;
		using pointer = Vector::const_pointer;
		using difference_type = Vector::difference_type;
		using iterator_category = std::forward_iterator_tag;

	private:
		pointer ptr;

	public:
		//Konstruktor
		ConstIterator() : ptr{ nullptr } {}              //const Konstruktor
		ConstIterator(pointer _ptr) : ptr{ _ptr } {}		//expection schreiben, falls ptr nicht vorhanden....

		pointer get_pointer() const {
			return ptr;
		}

		//Mehtoden
		reference operator*() const {
			return *ptr;
		}

		pointer operator->() const {
			return ptr;
		}

		bool operator==(const ConstIterator& iter) const {
			return ptr == iter.ptr;
		}

		bool operator!=(const ConstIterator& iter) const {
			return ptr != iter.ptr;
		}


		const_iterator& operator++() {
			ptr = ptr + 1;
			return *this;
		}

		const_iterator operator++(int) {
			ConstIterator old{ *this };
			ptr += 1;
			return old;
		}


		//-operator
		friend difference_type operator-(const Vector::ConstIterator& lop, const Vector::ConstIterator& rop) {
			return lop.ptr - rop.ptr;
		}

	};   //ConstIterator ende


	*/


  /*  ==============================
	  Klasse Vector geht weiter
	  ==============================
  */

private:
	size_type sz;
	size_type max_sz;
	pointer values;		//äquivalent zu - double* values
	static constexpr size_type min_sz{ 5 };

public:
	//=============
	//konstruktoren
	//=============

	Vector() : sz{ 0 }, max_sz{ min_sz }, values{ new value_type[min_sz] } {
	}

	Vector(size_type n) : sz{ 0 } {
		if (n < min_sz) {
			values = new value_type[min_sz];
			max_sz = min_sz;
		}
		else {
			values = new value_type[n];
			max_sz = n;
		}
	}

	
	//negative werte, kommazahlen
	Vector(std::initializer_list<value_type> list) : sz{ list.size() } {
		if (list.size() < min_sz) {
			max_sz = min_sz;
			values = new value_type[min_sz];
		}    
		else {
			max_sz = list.size();
			values = new value_type[list.size()];
		}

		size_type i{ 0 };
		for (auto x : list) {
			values[i] = x;
			++i;
		}
	}

	//destruktor
	~Vector() {
		delete[] values;
	}

	//Kopierkonstruktor
	Vector(const Vector& original) {
		sz = original.sz;
		max_sz = original.max_sz;
		values = new value_type[original.max_sz];

		for (size_type i{ 0 }; i < sz; ++i) 
			values[i] = original.values[i];
		
	}


	//Kopierzuweisungskonstruktor
	Vector& operator= (Vector v2) {

		std::swap(sz, v2.sz);
		std::swap(max_sz, v2.max_sz);
		std::swap(values, v2.values);

		return *this;
	}

	//=============
	//Methoden
	//=============

//Anzahl der Elemente
	size_type size() const {
		return sz;
	}

	//Leerer Vector
	bool empty() const {
		return sz == 0;
	}

	//Löscht Vector-Inhalt
	void clear() {
		sz = 0;
	}

	//Kapazität vergroessern
	void reserve(size_type n) {
		if (n < max_sz) {                              //exception führt zu problemen????
		  //throw std::runtime_error ("Vector bereits groesser \n");
		}
		else {
			max_sz = n;
			Vector help { *this };
			this->values = new value_type[max_sz];

			for (size_type i{ 0 }; i < help.sz; i++) {
				values[i] = help.values[i];
			}
		}
	}

	//Letztes Element entfernen
	void pop_back() {          //pointer???
		if (sz == 0)
			throw std::runtime_error("Vector bereits leer\n");

		--sz;
	}

	//Element hinzufuegen
	void push_back(value_type neuer_wert) {
		if (sz < max_sz) {
			values[sz] = neuer_wert;
			++sz;
		}
		else {
			reserve(sz * 2);			//im auge behalten
			values[sz] = neuer_wert;
			++sz;
		}

	}

	//passt vector an max size an
	void shrink_to_fit() {
		Vector help{ *this };
		values = new value_type[sz];
		for (size_type i{ 0 }; i < sz; ++i)
			values[i] = help.values[i];

		max_sz = sz;
	}


	//Vectorkapazitaet
	size_type capacity() const {
		return max_sz;
	}

	//Zugriffsoperator  
	value_type& operator[] (size_type index) {
		if (index > sz - 1)
			throw std::runtime_error("Zugriff ausserhalb des def. Vectorbereichs\n");

		return values[index];
	}

	const value_type& operator[] (size_type index) const {
		if (index > sz - 1)
			throw std::runtime_error("Zugriff ausserhalb des def. Vectorbereichs\n");

		return values[index];
	}


	//Ausgabeoperator
	friend std::ostream& operator << (std::ostream& o, const Vector& v) {
		o << "[";

		for (size_t i{ 0 }; i < v.sz; ++i) {

			o << v.values[i];
			if (i < v.sz - 1)        //problem beim sz ausgabe????
				o << ", ";
		}
		o << "]";
		return o;
	}

	/*

	iterator begin() {
		if (sz == 0)
			return end();
		return iterator{ values };
	}

	iterator end() {
		return iterator{ values + sz };
	}

	const_iterator begin() const {
		if (sz == 0)
			return end();
		return iterator{ values };
	}

	const_iterator end() const {
		return iterator{ values + sz };
	}

	
	
	//Insert
	iterator insert(const_iterator pos, const_reference val) {
		auto diff = pos - begin();

		if (diff<0 || static_cast <size_type> (diff)>sz)
			throw std::runtime_error("Iterator out of bounds");

		size_type current{ static_cast<size_type>(diff) };

		if (sz >= max_sz)
			reserve(max_sz * 2);

		for (auto i{ sz }; i-- > current;)
			values[i + 1] = values[i];

		values[current] = val; ++sz;

		return iterator{ values + current };
	}
	
	//erase
	iterator erase(const_iterator pos) {
		auto diff = pos - begin();

		if (diff < 0 || static_cast <size_type> (diff) >= sz)
			throw std::runtime_error("Iterator out of bounds");

		size_type current{ static_cast <size_type> (diff) };

		for (auto i{ current }; i < sz - 1; ++i)
			values[i] = values[i + 1];

		--sz;

		return iterator{ values + current };
	}

	*/

	/*
	Alternative Ausgabe
	ostream& std::operator<< (ostream& o, const Vector& v) {
	  return s.print(o);
	}

	ostream& print(ostream& o) const {
	  o << "[";
	  for (size_t i {0}; i < sz; ++i){
		o << values[i];
		if (i < sz-1)
		  o << ", ";
	  }
	  o << "]";
	}
	*/
};
#endif
